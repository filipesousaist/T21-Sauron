//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;

import "google/protobuf/timestamp.proto";


// *** GENERAL ***

// Geolocation
message Coordinates {
    double latitude = 1;
    double longitude = 2;
}

// Possible types of the observable objects
enum ObjectType {
    PERSON = 0;
    CAR = 1;
}

// Data of an observed object
message ObjectData {
    ObjectType type = 1;
    string id = 2;
}


// *** EYE ***

// cam_join
message CamJoinRequest {
    string camName = 1;
    Coordinates coordinates = 2;
}

message CamJoinReply {}

// cam_info
message CamInfoRequest {
    string camName = 1;
}

message CamInfoReply {
    Coordinates coordinates = 1;
}

// report
message ReportData {
    ObjectType type = 1;
    string id = 2;
}
message ReportRequest {
    string camName = 1;
    repeated ReportData data = 2;
}

message ReportReply {}


// *** SPOTTER ***

// Data about an observation of a single object on a single instant
message ObservationData {
    ObjectType type = 1;
    google.protobuf.Timestamp timestamp = 2;
    string id = 3;
    string camName = 4;
}

// track
message TrackRequest {
    ObjectData data = 1;
}

message TrackReply {
    ObservationData data = 1;
}

// trackMatch
message TrackMatchRequest {
    ObjectData data = 1;
}

message TrackMatchReply {
    repeated ObservationData data = 1;
}

// trace
message TraceRequest {
    ObjectData data = 1;
}

message TraceReply {
    repeated ObservationData data = 1;
}


// *** DEBUG ***

// ctrlPing
message CtrlPingRequest {
    string text = 1;
}

message CtrlPingReply {
    string text = 1;
}

// ctrlClear
message CtrlClearRequest {}

message CtrlClearReply {
    string text = 1;
}

// ctrlInit
message CtrlInitRequest {}

message CtrlInitReply {
    string text = 1;
}


// *** RPC SERVICE ***

service SiloService {
    rpc cam_join(CamJoinRequest) returns (CamJoinReply);
    rpc cam_info(CamInfoRequest) returns (CamInfoReply);
    rpc report(ReportRequest) returns (ReportReply);
    rpc track (TrackRequest) returns (TrackReply);
    rpc trackMatch (TrackMatchRequest) returns (TrackMatchReply);
    rpc trace (TraceRequest) returns (TraceReply);
    rpc ctrlPing (CtrlPingRequest) returns (CtrlPingReply);
    rpc ctrlClear (CtrlClearRequest) returns (CtrlClearReply);
    rpc ctrlInit (CtrlInitRequest) returns (CtrlInitReply);
}

// *** END ***